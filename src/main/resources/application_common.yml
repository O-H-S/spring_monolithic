app:
  admin-key: ${ACCOUNT_ADMIN_KEY}
  jwt-secret: ${JWT_SECRET}


server:
  port: 80 # 지정하지 않으면, 기본 포트가 8080으로 설정됨. (http://localhost/로 접속 불가능, 포트 명시해야함)
  ssl:
    #key-store: classpath:keystore.p12
    #key-store-password: ****
    #key-store-type: PKCS12
    #key-alias: tomcat
    enabled: false # # AWS ALB에서 HTTPS로 브라우저들과 통신하고, WAS(EC2)와 ALB가 같은 VPC 이므로 필요없어짐.
  servlet:
    session:
      cookie:
        name: JSESSIONID





spring:
  flyway:
    enabled: true
    baseline-on-migrate: ${FLYWAY_BASELINE_ON_MIGRATE:false} #
    baseline-version: ${FLYWAY_BASELINE_VERSION:1}
    outOfOrder: true # true로 설정하면 Flyway는 버전 순서에 상관없이 아직 적용되지 않은 모든 마이그레이션 파일을 실행합니다. 이는 마이그레이션이 순서대로 적용되지 않아도 모든 마이그레이션이 데이터베이스에 반영되도록 합니다.
    custom:
      repair-on-start: ${FLYWAY_REPAIR_ON_START:false}

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${DATABASE_URL}
    username: ${DATABASE_USERNAME}
    password: ${DATABASE_PASSWORD}
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      password: ${REDIS_PASSWORD}
  cloud:
    aws:
      region:
        auto: false
        static: ap-northeast-2
      credentials:
        access-key: ${AWS_IAM_S3_ACCESS}
        secret-key: ${AWS_IAM_S3_SECRET}
  cache:
    type: redis

  jpa:
    open-in-view: false
    database-platform: com.ohs.monolithic.common.utils.MySQLDialectCustom
    #database-platform: org.hibernate.dialect.MySQLDialect
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        jdbc.batch_size: 1000
        #order_inserts: true
        #order_updates: true
        #format_sql: true
        #show_sql: true
        #highlight_sql: true
        #use_sql_comments: true
    #defer-datasource-initialization: true


  security:
    oauth2:
      client:
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
        registration:
          kakao:
            client-id: ${OAUTH2_KAKAO_CLIENT_ID}
            client-secret: ${OAUTH2_KAKAO_CLIENT_SECRET}
            client-authentication-method: client_secret_post
            redirect-uri: https://api.ohs.kr/login/oauth2/code/kakao
            authorization-grant-type: authorization_code
            client-name: kakao
            scope:
              - profile_nickname
              - account_email
          naver:
            client-id: ${OAUTH2_NAVER_CLIENT_ID}
            client-secret: ${OAUTH2_NAVER_CLIENT_SECRET}
            redirect-uri: https://api.ohs.kr/login/oauth2/code/naver
            authorization-grant-type: authorization_code
            scope:
              - name
              - email
            client-name: Naver
          google:
            client-id: ${OAUTH2_GOOGLE_CLIENT_ID}
            client-secret: ${OAUTH2_GOOGLE_CLIENT_SECRET}
            redirect-uri: https://api.ohs.kr/login/oauth2/code/google
            scope:
              - email
              - profile